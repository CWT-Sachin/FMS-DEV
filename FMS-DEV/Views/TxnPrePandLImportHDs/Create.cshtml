@* @model FMS_DEV.Models.TxnPrePandLHD *@
@using System.Globalization
@model FMS_DEV.ViewModel.PrePandLViewModel


@{
    ViewData["Title"] = "Create";
}

<style>
    <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" rel="stylesheet" >
</style>


<style>
    .progress {
        width: 100%;
        background-color: #f3f3f3;
        border-radius: 5px;
        overflow: hidden;
        margin: 10px 0;
    }

    .pl-container {
        border: 1px solid #ccc;
        padding: 10px;
        display: flex;
        align-items: center;
        width: fit-content;
        border-radius: 10px; /* Rounded corners */
        box-shadow: 0 0 5px rgba(0, 0, 0, 0.1); /* Subtle outline */
    }

    .pl-label {
        font-weight: bold;
        margin-right: 10px;
    }

    .pl-input {
        border: 1px solid #ccc;
        padding: 5px;
        width: 80px;
        text-align: right;
    }
</style>


<!-- ============================================================== -->
<!-- Main wrapper - style you can find in pages.scss -->
<!-- ============================================================== -->
<div id="main-wrapper">
    <!-- ============================================================== -->
    <!-- Page wrapper  -->
    <!-- ============================================================== -->
    <div class="page-wrapper">
        <!-- ============================================================== -->
        <!-- Container fluid  -->
        <!-- ============================================================== -->
        <div class="container-fluid">
            <div class="card">
            <!--Heading-->
             <div class="card-header bg-info">
                    <h4 class="m-b-0 text-white">Import Department</h4>
                    <h6 class="m-b-0 text-white">P & L- CREATE</h6>
             </div>

            

            <div class="card-body">
                
                <!--stuffing planno search-->
                    <div class="row">

                        <div class="col-md-4">
                            <div class="row">
                                <div class="col-2">
                                    <label for="PlanId">Job No.</label>
                                </div>
                                <div class="col-5">

                                    <div class="row align-self-center text-right">
                                        @using (Html.BeginForm("Create", "TxnPrePandLHDs", new { searchString = "" }, FormMethod.Get))
                                        {
                                            <div class="input-group">
                                                <input type="text" id="searchString" name="searchString" class="form-control" />
                                                <div class="input-group-append">
                                                    <button type="submit" class="btn btn-info"> <i class="fas fa-search-plus"></i> Go!</button>
                                                </div>
                                            </div>
                                        }
                                    </div>


                                </div>
                                <label class="control-label text-right col-md-4" style="color: red;">@ViewBag.PlanFound</label>
                            </div>

                        </div>

                        <div class="col-md-8"></div>

                    </div><br />

                <!--stuffing plan details-->
                    <div class="row">
                        <div class="col-md-4">
                            <div class="row">
                                <div class="col-md-6">
                                    <label for="Plan Id">Job No.</label>
                                </div>
                                <div class="col-md-6">

                                    @Html.DisplayFor(m => Model.txnStuffingPlanHdMulti.FirstOrDefault().PlanId)

                                </div>
                            </div>
                        </div>

      @*                   <div class="col-md-4">
                            <div class="row">
                                <div class="col-md-6">
                                    <label for="Date">Date</label>
                                </div>
                                <div class="col-md-6">
                                    @Html.DisplayFor(m => Model.txnStuffingPlanHdMulti.FirstOrDefault().PlaneDate)
                                </div>
                            </div>
                        </div> *@

                        <div class="col-md-4"></div>

                    </div><br />

                    <form asp-action="Create" asp-controller="TxnPrePandLHDs">
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                        <br />
                        <h6 class="box-title"></h6>

                                                <div class="row">
                        <div class="col-md-3">
                        <div class="form-group row">
                        <label class="control-label text-left col-md-3">Job Date</label>
                        <div class="col-md-9">

                        <input type="date" asp-for="txnPrePandLHDMulti.FirstOrDefault().Date" class="form-control" />
                        <span asp-validation-for="txnPrePandLHDMulti.FirstOrDefault().Date" class="text-danger"></span>


                        </div>
                        </div>
                        </div>
                        </div>


                        <div class="line" style="border-top: 1px solid #999999;"></div>
                        <br /><br />


                         <div class="row">
                        <div class="col-md-4">
                        <div class="form-group row">
                        <label class="control-label text-left col-md-3">ETA</label>
                        <div class="col-md-9">

                                        <input type="date" asp-for="txnPrePandLHDMulti.FirstOrDefault().Date" class="form-control" />
                                        <span asp-validation-for="txnPrePandLHDMulti.FirstOrDefault().Date" class="text-danger"></span>
                        </div>
                        </div>
                        </div>
                        <div class="col-md-4">
                        <div class="form-group row">
                        <label class="control-label text-left col-md-3">POD</label>
                        <div class="col-md-9">

                        <select id="POD" class="form-control" asp-items="ViewBag.POD"></select>
                        </div>
                        </div>
                        </div>
                        <div class="col-md-4">
                        <div class="form-group row">
                        <label class="control-label text-left col-md-3">Shipping Line</label>
                        <div class="col-md-9">

                        <select id="Shipping Line" class="form-control" asp-items="ViewBag.ShippingLine"></select>
                        </div>
                        </div>
                        </div>
                        </div>

                        <br />

                        <div class="row">
                        <div class="col-md-4">
                                <div class="form-group row">
                                    <label class="control-label text-left col-md-4">Exchange Rate </label>
                                    <div class="col-md-8">

                                        @*   <input id="ACEStuffing" type="text" class="form-control" /> *@
                                        <input asp-for="txnPrePandLHDMulti.FirstOrDefault().EXPCostACEStuffing" class="form-control text-right Exp-cost-colombo-input" />
                                        <span asp-validation-for="txnPrePandLHDMulti.FirstOrDefault().EXPCostACEStuffing" class="text-danger"></span>

                                    </div>
                                </div>
                        </div>
                        <div class="col-md-4">
                        <div class="form-group row">
                        <label class="control-label text-left col-md-3">Handle By</label>
                        <div class="col-md-9">

                        <select id="FDN" class="form-control" asp-items="ViewBag.FDN"></select>
                        </div>
                        </div>
                        </div>
                        <div class="col-md-4">
                        <div class="form-group row">
                        <label class="control-label text-left col-md-3">Agent</label>
                        <div class="col-md-9">

                        <select id="Agent" class="form-control" asp-items="ViewBag.Agent"></select>
                        </div>
                        </div>
                        </div>
                        </div>

                        <div class="line" style="border-top: 1px solid #999999;"></div>
                        <br />

                        <table style="width: 100%; border-collapse: collapse;">
                            <thead>
                                <tr>
                                    <th style="border: 1px solid #ddd; padding: 8px;">CIF</th>
                                    <th style="border: 1px solid #ddd; padding: 8px;">Nomination</th>
                                    <th style="border: 1px solid #ddd; padding: 8px;">Local</th>
                                    <th style="border: 1px solid #ddd; padding: 8px;">TS</th>
                                    <th style="border: 1px solid #ddd; padding: 8px;">TOTAL</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td style="border: 1px solid #ddd; padding: 8px;">BLs</td>
                                    <td style="border: 1px solid #ddd; padding: 8px;"></td>
                                    <td style="border: 1px solid #ddd; padding: 8px;"></td>
                                    <td style="border: 1px solid #ddd; padding: 8px;"></td>
                                    <td style="border: 1px solid #ddd; padding: 8px;"></td>
                                </tr>
                                <tr>
                                    <td style="border: 1px solid #ddd; padding: 8px;">CBM</td>
                                    <td style="border: 1px solid #ddd; padding: 8px;"></td>
                                    <td style="border: 1px solid #ddd; padding: 8px;"></td>
                                    <td style="border: 1px solid #ddd; padding: 8px;"></td>
                                    <td style="border: 1px solid #ddd; padding: 8px;"></td>
                                </tr>
                            </tbody>
                        </table>
                        <br />




                        <div class="line" style="border-top: 1px solid #999999;"></div>
                        <br />

                        <h2>Local BLs</h2>

                        <table style="width: 100%; border-collapse: collapse;">
                            <thead>
                                <tr style="background-color: #007BFF; color: white;">
                                    <th style="border: 1px solid #ddd; padding: 8px;">S/No</th>
                                    <th style="border: 1px solid #ddd; padding: 8px;">BL Number</th>
                                    <th style="border: 1px solid #ddd; padding: 8px;">Consignee</th>
                                    <th style="border: 1px solid #ddd; padding: 8px;">BL term</th>
                                    <th style="border: 1px solid #ddd; padding: 8px;">Type</th>
                                    <th style="border: 1px solid #ddd; padding: 8px;">Weight</th>
                                    <th style="border: 1px solid #ddd; padding: 8px;">CBM</th>
                                    <th style="border: 1px solid #ddd; padding: 8px;">Total Income</th>
                                    <th style="border: 1px solid #ddd; padding: 8px;">Total Expense</th>
                                    <th style="border: 1px solid #ddd; padding: 8px; background-color: yellow;">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td style="border: 1px solid #ddd; padding: 8px;">1</td>
                                    <td style="border: 1px solid #ddd; padding: 8px;">HE3422789</td>
                                    <td style="border: 1px solid #ddd; padding: 8px;">ABC Company</td>
                                    <td style="border: 1px solid #ddd; padding: 8px;">P</td>
                                    <td style="border: 1px solid #ddd; padding: 8px;">D</td>
                                    <td style="border: 1px solid #ddd; padding: 8px;">3.33</td>
                                    <td style="border: 1px solid #ddd; padding: 8px;">1</td>
                                    <td style="border: 1px solid #ddd; padding: 8px;">29,500.00</td>
                                    <td style="border: 1px solid #ddd; padding: 8px;">17,800.00</td>
                                    <td style="border: 1px solid #ddd; padding: 8px; background-color: yellow;">Enter Income/Expense</td>
                                </tr>
                                <tr>
                                    <td style="border: 1px solid #ddd; padding: 8px;">2</td>
                                    <td style="border: 1px solid #ddd; padding: 8px;">XLLD23457</td>
                                    <td style="border: 1px solid #ddd; padding: 8px;">XYZ Lines</td>
                                    <td style="border: 1px solid #ddd; padding: 8px;">P</td>
                                    <td style="border: 1px solid #ddd; padding: 8px;">D</td>
                                    <td style="border: 1px solid #ddd; padding: 8px;">1.5</td>
                                    <td style="border: 1px solid #ddd; padding: 8px;">2.2</td>
                                    <td style="border: 1px solid #ddd; padding: 8px;"></td>
                                    <td style="border: 1px solid #ddd; padding: 8px;"></td>
                                    <td style="border: 1px solid #ddd; padding: 8px; background-color: yellow;">Enter Income/Expense</td>
                                </tr>
                                <tr>
                                    <td style="border: 1px solid #ddd; padding: 8px;">3</td>
                                    <td style="border: 1px solid #ddd; padding: 8px;">Q34TL784</td>
                                    <td style="border: 1px solid #ddd; padding: 8px;">SDA Company</td>
                                    <td style="border: 1px solid #ddd; padding: 8px;">C</td>
                                    <td style="border: 1px solid #ddd; padding: 8px;">D</td>
                                    <td style="border: 1px solid #ddd; padding: 8px;">12.564</td>
                                    <td style="border: 1px solid #ddd; padding: 8px;">3</td>
                                    <td style="border: 1px solid #ddd; padding: 8px;"></td>
                                    <td style="border: 1px solid #ddd; padding: 8px;"></td>
                                    <td style="border: 1px solid #ddd; padding: 8px; background-color: yellow;">Enter Income/Expense</td>
                                </tr>
                            </tbody>
                        </table>

                        <p style="text-align: center;">Totals for each column</p>

                        <div class="line" style="border-top: 1px solid #999999;"></div>
                        <br />

                        <div class="line" style="border-top: 1px solid #999999;"></div>
                        <br />

                        <h2>Local BLs</h2>

                        <div class="col-md-12">
                            <div class="form-group row">
                                <h4>Local BLs</h4>
                                <table id="localBLTable" class="table">
                                    <thead>
                                        <tr>
                                            <th>S/No</th>
                                            <th>BL Number</th>
                                            <th>Consignee</th>
                                            <th>BL Term</th>
                                            <th>Type</th>
                                            <th>Weight</th>
                                            <th>CBM</th>
                                            <th>Total Income</th>
                                            <th>Total Expense</th>
                                            <th></th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                                            <td>1</td>
                                            <td>
                                                <input type="text" class="form-control" name="BLNumber" value="HE3422789" />
                                            </td>
                                            <td>
                                                <input type="text" class="form-control" name="Consignee" value="ABC Company" />
                                            </td>
                                            <td>
                                                <select class="form-control" name="BLTerm">
                                                    <option value="P">P</option>
                                                    <option value="C">C</option>
                                                </select>
                                            </td>
                                            <td>
                                                <select class="form-control" name="Type">
                                                    <option value="D">D</option>
                                                    <option value="E">E</option>
                                                </select>
                                            </td>
                                            <td>
                                                <input type="number" class="form-control" name="Weight" value="3.33" step="0.01" />
                                            </td>
                                            <td>
                                                <input type="number" class="form-control" name="CBM" value="1" step="0.01" />
                                            </td>
                                            <td>
                                                <input type="text" class="form-control text-right" name="TotalIncome" value="29,500.00" />
                                            </td>
                                            <td>
                                                <input type="text" class="form-control text-right" name="TotalExpense" value="17,800.00" />
                                            </td>
                                            <td>
                                                <button type="button" class="btn btn-danger removeRow">Remove</button>
                                            </td>
                                        </tr>
                                    </tbody>
                                    <tfoot>
                                        <tr>
                                            <td colspan="8"><b>Total for each column</b></td>
                                            <td></td>
                                        </tr>
                                    </tfoot>
                                </table>
                                <button type="button" id="addLocalBLRow" class="btn btn-success">Add Local BL</button>
                            </div>
                        </div>



                        <div class="line" style="border-top: 1px solid #999999;"></div>
                        <br />

                        <!--Bl Details-->
                        <h2>BL Details</h2>

                        <div style="border: 1px solid #ddd; padding: 20px; border-radius: 5px;">
                            <div style="display: flex; flex-wrap: wrap; margin-bottom: 10px;">
                                <div style="flex: 1; margin-right: 10px;">
                                    <label for="blNumber" style="display: block;">BL Number</label>
                                    <input type="text" id="blNumber" value="HE3422789" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;" />
                                </div>
                                <div style="flex: 1; margin-right: 10px;">
                                    <label for="consignee" style="display: block;">Consignee</label>
                                    <input type="text" id="consignee" value="ABC Company" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;" />
                                </div>
                                <div style="flex: 1; margin-right: 10px;">
                                    <label for="weight" style="display: block;">Weight</label>
                                    <input type="text" id="weight" value="3.33" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;" />
                                </div>
                                <div style="flex: 1;">
                                    <label for="cbm" style="display: block;">CBM</label>
                                    <input type="text" id="cbm" value="1" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;" />
                                </div>
                            </div>
                            <div style="display: flex; flex-wrap: wrap;">
                                <div style="flex: 1; margin-right: 10px;">
                                    <label for="blTerm1" style="display: block;">BL Term</label>
                                    <input type="text" id="blTerm1" value="P" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;" />
                                </div>
                                <div style="flex: 1;">
                                    <label for="blTerm2" style="display: block;">BL Term</label>
                                    <input type="text" id="blTerm2" value="D" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;" />
                                </div>
                            </div>
                        </div>
                        <br />

                        <div class="line" style="border-top: 1px solid #999999;"></div>
                        <br />

         

                        <div style="display: flex; justify-content: space-between;">

                            <!--Left Side-->
                            <div class="col-md-6">
                                <h2>Income</h2>

                                <div class="form-group">
                                    <label for="DOCharges">DO Charges</label>
                                    <input type="text" id="DOCharges" name="DOCharges" class="form-control" placeholder="Enter DO Charges" />
                                </div>

                                <div class="form-group">
                                    <label for="FreightCollect">Freight Collect</label>
                                    <input type="text" id="FreightCollect" name="FreightCollect" class="form-control" placeholder="Enter Freight Collect" />
                                </div>

                                <div class="form-group">
                                    <label for="ExWork1">Ex Work 1</label>
                                    <input type="text" id="ExWork1" name="ExWork1" class="form-control" placeholder="Enter Ex Work 1" />
                                </div>

                                <div class="form-group">
                                    <label for="ExWork2">Ex Work 2</label>
                                    <input type="text" id="ExWork2" name="ExWork2" class="form-control" placeholder="Enter Ex Work 2" />
                                </div>

                                <div class="form-group">
                                    <label for="ExWork3">Ex Work 3</label>
                                    <input type="text" id="ExWork3" name="ExWork3" class="form-control" placeholder="Enter Ex Work 3" />
                                </div>

                                <div class="form-group">
                                    <label for="LinerCharges">Liner Charges</label>
                                    <input type="text" id="LinerCharges" name="LinerCharges" class="form-control" placeholder="Enter Liner Charges" />
                                </div>

                                <div class="form-group">
                                    <label for="TotalIncome">Total Income USD</label>
                                    <input type="text" id="TotalIncome" name="TotalIncome" class="form-control" placeholder="Calculated Total Income" readonly />
                                </div>
                            </div>
               
                            @* <div class="col-md-6">
                                <div class="form-group row">
                                    <h4>Income</h4>
                                    <table id="incomeTable" class="table">
                                        <thead>
                                            <tr>
                                                <th>Component</th>
                                                <th>Amount USD</th>
                                                <th></th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <!-- Initial row template for income -->
                                            <tr>
                                                <td>
                                                    <select class="form-control" name="IncomeComponent">
                                                        <option value="DO Charges">DO Charges</option>
                                                        <option value="Freight Collect">Freight Collect</option>
                                                        <option value="Ex Work 1">Ex Work 1</option>
                                                        <option value="Ex Work 2">Ex Work 2</option>
                                                        <option value="Ex Work 3">Ex Work 3</option>
                                                        <option value="Liner Charges">Liner Charges</option>
                                                    </select>
                                                </td>
                                                <td>
                                                    <input type="text" class="form-control text-right" name="IncomeAmount" />
                                                </td>
                                                <td>
                                                    <button type="button" class="btn btn-danger removeRow">Remove</button>
                                                </td>
                                            </tr>
                                        </tbody>
                                        <tfoot>
                                            <tr>
                                                <td><b>Total Income USD</b></td>
                                                <td>
                                                    <input type="text" id="TotalIncomeUSD" class="form-control" readonly style="text-align: right;" />
                                                </td>
                                                <td></td>
                                            </tr>
                                        </tfoot>
                                    </table>
                                    <button type="button" id="addIncomeRow" class="btn btn-success">Add Income</button>
                                </div>
                            </div> *@

                            <!-- Right Side (Rebate & Expense) -->
                            
                            <div class="col-md-6">
                                <h4>Rebate & Expense</h4>

                                <!-- Rebate/CBM, Rebate/BL, FRT/Kg -->
                                <div class="form-group row">
                                    <div class="col-md-4">
                                        <label for="RebateCBM">Rebate/CBM</label>
                                        <input type="text" id="RebateCBM" class="form-control" value="4.00" />
                                    </div>
                                    <div class="col-md-4">
                                        <label for="RebateBL">Rebate/BL</label>
                                        <input type="text" id="RebateBL" class="form-control" value="36.00" />
                                    </div>
                                    <div class="col-md-4">
                                        <label for="FRTKg">FRT - /Kg</label>
                                        <input type="text" id="FRTKg" class="form-control" value="0" />
                                    </div>
                                </div>

                                <!-- Rebate/CBM USD, Rebate/BL USD, FRT -->
                                <div class="form-group row">
                                    <div class="col-md-6">
                                        <label for="RebateCBMUSD">Rebate/CBM USD</label>
                                        <input type="text" id="RebateCBMUSD" class="form-control"  value="13.32" />
                                    </div>
                                    <div class="col-md-6">
                                        <label for="RebateBLUSD">Rebate/BL USD</label>
                                        <input type="text" id="RebateBLUSD" class="form-control"  value="36.00" />
                                    </div>
                                </div>

                                <div class="form-group row">
                                    <div class="col-md-6">
                                        <label for="FRT">FRT</label>
                                        <input type="text" id="FRT" class="form-control" value="0.00" />
                                    </div>
                                </div>

                                <!-- Total Exp USD and LKR -->
                                <div class="form-group row">
                                    <div class="col-md-6">
                                        <label for="TotalExpUSD">Total Exp USD</label>
                                        <input type="text" id="TotalExpUSD" class="form-control"  value="49.32" />
                                    </div>
                                    <div class="col-md-6">
                                        <label for="TotalExpLKR">Total Exp LKR</label>
                                        <input type="text" id="TotalExpLKR" class="form-control"  value="15,289.20" />
                                    </div>
                                </div>
                            </div>



                        </div>




                        <div class="line" style="border-top: 1px solid #999999;"></div>
                        <br />

                     



                        <input type="hidden" id="ExpensesJson" name="ExpensesJson" />
                        <input type="hidden" id="IncomesJson" name="IncomesJson" />


                    


                        <div class="row">
                            <div class="col-md-6">


                                @{
                                    var totalExpenses = Model.txnPrePandLHDMulti.FirstOrDefault()?.TotalExpenses;
                                    var formattedTotalExpenses = totalExpenses.HasValue ? $"LKR {totalExpenses.Value:N2}" : "LKR 0.00";
                                }

                                <div class="form-group row">
                                    <label class="control-label text-left col-md-6"><b>Total Expenses</b></label>
                                    <div class="col-md-4">
                                        <input id="TotalExpenses" value="@formattedTotalExpenses" class="form-control text-right" readonly />
                                        <span asp-validation-for="txnPrePandLHDMulti.FirstOrDefault().TotalExpenses" class="text-danger"></span>
                                    </div>
                                </div>




                            </div>

                            <div class="col-md-6">

                                <div class="form-group row">
                                    <label class="control-label text-left col-md-6"><b>Total Income</b> </label>
                                    <div class="col-md-4">

                                        <input id="TotalIncome" asp-for="txnPrePandLHDMulti.FirstOrDefault().TotalIncome" type="text" class="form-control text-right" readonly />
                                        <span asp-validation-for="txnPrePandLHDMulti.FirstOrDefault().TotalIncome" class="text-danger"></span>

                                    </div>
                                </div>

                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-4"></div>
                            <div class="col-md-4">
                                <div class="pl-container">
                                    <label class="pl-label">P&L</label>
                                    <input id="PLValue" asp-for="txnPrePandLHDMulti.FirstOrDefault().PandL" type="text" class="pl-input text-right" value="0.00" readonly>
                                </div>
                            </div>
                            <div class="col-md-4"></div>
                        </div>


                        <br />
                        <br />

                        <!--Remarks Textbox-->
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <h6 class="box-title">Remarks</h6>
                                    <div class="col-md-12">
                                        <textarea  class="form-control" name="Remarks" type="text" placeholder="Type here your Remarks" rows="5"> </textarea>
                                        @* <input asp-for="BLTypeID" class="form-control" />*@
                                        <span  class="text-danger"></span>

                                    </div>
                                </div>
                            </div>
                        </div><br />

                        <!--Save Button-->
                        <div class="form-group">
                            <!-- Hidden field to store JSON data -->
                            <input type="hidden" name="dtlItemsJson" id="dtlItemsJson" />
                            @* <input type="submit" onclick="submitForm(this)" value="Create P & L" class="btn btn-primary" /> *@
                            <input type="submit" value="Create" class="btn btn-primary" />
                        </div>

                        <br />
                    </form>
                    <br />




            </div>
            </div>

            </div>

            <div>
                <a asp-action="Index">Back to List</a>
            </div>

            </div>
        </div>







@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        document.getElementById("addLocalBLRow").addEventListener("click", function () {
            let table = document.getElementById("localBLTable").getElementsByTagName('tbody')[0];
            let newRow = table.insertRow();

            // Create and fill new cells
            newRow.innerHTML = `
                    <td>${table.rows.length + 1}</td>
                    <td><input type="text" class="form-control" name="BLNumber" /></td>
                    <td><input type="text" class="form-control" name="Consignee" /></td>
                    <td>
                        <select class="form-control" name="BLTerm">
                            <option value="P">P</option>
                            <option value="C">C</option>
                        </select>
                    </td>
                    <td>
                        <select class="form-control" name="Type">
                            <option value="D">D</option>
                            <option value="E">E</option>
                        </select>
                    </td>
                    <td><input type="number" class="form-control" name="Weight" step="0.01" /></td>
                    <td><input type="number" class="form-control" name="CBM" step="0.01" /></td>
                    <td><input type="text" class="form-control text-right" name="TotalIncome" /></td>
                    <td><input type="text" class="form-control text-right" name="TotalExpense" /></td>
                    <td><button type="button" class="btn btn-danger removeRow">Remove</button></td>
                `;
        });

        // Event delegation to handle removal of rows
        document.getElementById("localBLTable").addEventListener("click", function (e) {
            if (e.target && e.target.classList.contains("removeRow")) {
                let row = e.target.closest('tr');
                row.parentNode.removeChild(row);
                // Update S/No for remaining rows
                let rows = document.querySelectorAll("#localBLTable tbody tr");
                rows.forEach((row, index) => {
                    row.cells[0].innerText = index + 1;
                });
            }
        });
    </script>

    <script>
        $(document).ready(function () {
            // Add income row
            $('#addIncomeRow').click(function () {
                var newRow = `<tr>
                                    <td>
                                        <select class="form-control" name="IncomeComponent">
                                            <option value="DO Charges">DO Charges</option>
                                            <option value="Freight Collect">Freight Collect</option>
                                            <option value="Ex Work 1">Ex Work 1</option>
                                            <option value="Ex Work 2">Ex Work 2</option>
                                            <option value="Ex Work 3">Ex Work 3</option>
                                            <option value="Liner Charges">Liner Charges</option>
                                        </select>
                                    </td>
                                    <td>
                                        <input type="text" class="form-control text-right" name="IncomeAmount" />
                                    </td>
                                    <td>
                                        <button type="button" class="btn btn-danger removeRow">Remove</button>
                                    </td>
                                </tr>`;
                $('#incomeTable tbody').append(newRow);
            });

            // Remove income row
            $(document).on('click', '.removeRow', function () {
                $(this).closest('tr').remove();
                calculateTotalIncome();
            });

            // Calculate total income
            $(document).on('input', 'input[name="IncomeAmount"]', function () {
                calculateTotalIncome();
            });

            function calculateTotalIncome() {
                var totalIncome = 0;
                $('input[name="IncomeAmount"]').each(function () {
                    var amount = parseFloat($(this).val()) || 0;
                    totalIncome += amount;
                });
                $('#TotalIncomeUSD').val(totalIncome.toFixed(2));
            }
        });
    </script>

    <script>

        // Function to calculate P&L (Profit and Loss)
        function calculatePnL() {
            let totalIncome = parseFloat(document.getElementById('TotalIncome').value) || 0;
            let totalExpenses = parseFloat(document.getElementById('TotalExpenses').value) || 0;
            let plValue = totalIncome - totalExpenses;

            //document.getElementById('PLValue').value = plValue.toFixed(2);

            let plInput = document.getElementById('PLValue');
            plInput.value = plValue.toFixed(2);

            // Change color based on P&L value
            if (plValue < 0) {
                // Negative value: red background and white text
                plInput.style.backgroundColor = 'red';
                plInput.style.color = 'white';
            } else if (plValue > 0) {
                // Positive value: light green background and default text color
                plInput.style.backgroundColor = 'lightgreen';
                plInput.style.color = '';
            } else {
                // Value is 0: reset colors
                plInput.style.backgroundColor = '';
                plInput.style.color = '';
            }
        }

        // Function to calculate the total expenses including all fields
        function calculateTotalExpenses() {
            let totalHandling = parseFloat(document.getElementById('TotalHandlingSystemcost').value) || 0;
            let totalRebate = parseFloat(document.getElementById('TotalRebateSystemcost').value) || 0;
            let totalTrucking = parseFloat(document.getElementById('TruckingCost').value) || 0;
            let totalExportColombo = parseFloat(document.getElementById('TotalExportCostColombo').value) || 0;
            let totalOtherExpenses = calculateOtherExpensesTotal();

            // Sum all totals
            let grandTotal = totalHandling + totalRebate + totalTrucking + totalExportColombo + totalOtherExpenses;

            // Update the Total Expenses field
            document.getElementById('TotalExpenses').value = grandTotal.toFixed(2);
            calculatePnL();
        }

        // Function to calculate the total for "Other Expenses"
        function calculateOtherExpensesTotal() {
            let total = 0;
            document.querySelectorAll('#otherExpensesTable tbody tr input[name="ExpenseAmount"]').forEach(function (input) {
                let value = parseFloat(input.value) || 0;
                total += value;
            });
            // Update the total for "Other Expenses"
            document.getElementById('TotalOtherExpenses').value = total.toFixed(2);
            return total;
        }

        // Function to calculate the total income from individual inputs
        function calculateIncomeWithoutOtherincome() {
            let total = 0;
            document.querySelectorAll('.income-input').forEach(function (input) {
                let value = parseFloat(input.value) || 0; // Convert input value to a float, or 0 if NaN
                total += value; // Add each value to the total
            });
            document.getElementById('IncomeWithoutOtherincome').value = total.toFixed(2); // Update the total in the readonly input
        }

        // Function to calculate the total income from "Other Incomes"
        function calculateOtherIncomesTotal() {
            let total = 0;
            document.querySelectorAll('#otherIncomesTable tbody tr input[name="IncomeAmount"]').forEach(function (input) {
                let value = parseFloat(input.value) || 0; // Convert input value to a float, or 0 if NaN
                total += value; // Add each value to the total
            });
            // Update the total for "Other Incomes"
            document.getElementById('TotalOtherIncomes').value = total.toFixed(2);
            return total;
        }

        // Function to calculate the grand total income including other incomes
        function calculateTotalIncome() {
            let incomeWithoutOther = parseFloat(document.getElementById('IncomeWithoutOtherincome').value) || 0;
            let otherIncomesTotal = calculateOtherIncomesTotal();
            let grandTotalIncome = incomeWithoutOther + otherIncomesTotal;

            document.getElementById('TotalIncome').value = grandTotalIncome.toFixed(2);
            calculatePnL();
            //document.querySelector('input[asp-for="txnPrePandLHDMulti.FirstOrDefault().TotalIncome"]').value = grandTotalIncome.toFixed(2);
        }

        // Attach event listeners to update totals
        function attachEventListeners() {
            document.querySelectorAll('.Handling-cost-input, .Rebate-cost-input, .Trucking-cost-input, .Exp-cost-colombo-input').forEach(function (input) {
                input.addEventListener('input', function () {
                    calculateIndividualTotals(); // Recalculate individual totals
                    calculateTotalExpenses(); // Update overall total
                });
            });

            document.querySelectorAll('.income-input').forEach(function (input) {
                input.addEventListener('input', function () {
                    calculateIncomeWithoutOtherincome(); // Recalculate income without other income
                    calculateTotalIncome(); // Update total income
                });
            });

            // Trigger calculation on input change in "Other Expenses"
            document.querySelectorAll('#otherExpensesTable tbody').forEach(function (tbody) {
                tbody.addEventListener('input', function () {
                    calculateTotalExpenses(); // Update total expenses
                });
            });

            // Trigger calculation on input change in "Other Incomes"
            document.querySelectorAll('#otherIncomesTable tbody').forEach(function (tbody) {
                tbody.addEventListener('input', function () {
                    calculateOtherIncomesTotal(); // Update total other incomes
                    calculateTotalIncome(); // Update total income
                });
            });

            // Calculate totals on page load to handle any pre-filled values
            window.onload = function () {
                calculateIndividualTotals();
                calculateTotalExpenses();
                calculateIncomeWithoutOtherincome();
                calculateOtherIncomesTotal();
                calculateTotalIncome();
                calculatePnL();
            };
        }

        // Recalculate each individual total
        function calculateIndividualTotals() {
            calculateTotalHandlingSystemCost();
            calculateTotalRebateSystemCost();
            calculateTruckingCost();
            calculateTotalExportCostColombo();
        }

        // Recalculate handling system cost
        function calculateTotalHandlingSystemCost() {
            let total = 0;
            document.querySelectorAll('.Handling-cost-input').forEach(function (input) {
                let value = parseFloat(input.value) || 0;
                total += value;
            });
            document.getElementById('TotalHandlingSystemcost').value = total.toFixed(2);
        }

        // Recalculate rebate system cost
        function calculateTotalRebateSystemCost() {
            let total = 0;
            document.querySelectorAll('.Rebate-cost-input').forEach(function (input) {
                let value = parseFloat(input.value) || 0;
                total += value;
            });
            document.getElementById('TotalRebateSystemcost').value = total.toFixed(2);
        }

        // Recalculate trucking cost
        function calculateTruckingCost() {
            let total = 0;
            document.querySelectorAll('.Trucking-cost-input').forEach(function (input) {
                let value = parseFloat(input.value) || 0;
                total += value;
            });
            document.getElementById('TruckingCost').value = total.toFixed(2);
        }

        // Recalculate export cost Colombo
        function calculateTotalExportCostColombo() {
            let total = 0;
            document.querySelectorAll('.Exp-cost-colombo-input').forEach(function (input) {
                let value = parseFloat(input.value) || 0;
                total += value;
            });
            document.getElementById('TotalExportCostColombo').value = total.toFixed(2);
        }

        $(document).ready(function () {
            // Add new row for "Other Expenses"
            $('#addExpenseRow').click(function () {
                var newRow = `<tr>
                                        <td><input type="text" class="form-control" name="ExpenseDescription" /></td>
                                        <td><input type="number" class="form-control" name="ExpenseAmount" /></td>
                                        <td><button type="button" class="btn btn-danger removeRow">Remove</button></td>
                                      </tr>`;
                $('#otherExpensesTable tbody').append(newRow);
                calculateTotalExpenses(); // Recalculate total when new row is added
            });

            // Add new row for "Other Incomes"
            $('#addIncomeRow').click(function () {
                var newRow = `<tr>
                                        <td><input type="text" class="form-control" name="IncomeDescription" /></td>
                                        <td><input type="number" class="form-control" name="IncomeAmount" /></td>
                                        <td><button type="button" class="btn btn-danger removeRow">Remove</button></td>
                                      </tr>`;
                $('#otherIncomesTable tbody').append(newRow);
                calculateTotalIncome(); // Recalculate total income when new row is added
            });

            // Remove a row from "Other Expenses" or "Other Incomes"
            $(document).on('click', '.removeRow', function () {
                $(this).closest('tr').remove();
                calculateTotalExpenses(); // Recalculate total expenses when a row is removed
                calculateTotalIncome(); // Recalculate total income when a row is removed
            });

            // Calculate totals on form submission
            $('form').submit(function () {
                var expenses = [];
                $('#otherExpensesTable tbody tr').each(function () {
                    var description = $(this).find('input[name="ExpenseDescription"]').val();
                    var amount = $(this).find('input[name="ExpenseAmount"]').val();
                    if (description && amount) {
                        expenses.push({ Description: description, Amount: amount });
                    }
                });

                var incomes = [];
                $('#otherIncomesTable tbody tr').each(function () {
                    var description = $(this).find('input[name="IncomeDescription"]').val();
                    var amount = $(this).find('input[name="IncomeAmount"]').val();
                    if (description && amount) {
                        incomes.push({ Description: description, Amount: amount });
                    }
                });

                $('#ExpensesJson').val(JSON.stringify(expenses));
                $('#IncomesJson').val(JSON.stringify(incomes));
            });

            attachEventListeners(); // Attach all event listeners on page load
        });
    </script>
}








@* @section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        // Function to calculate the total income without other income
        function calculateIncomeWithoutOtherincome() {
            let total = 0;
            document.querySelectorAll('.income-input').forEach(function (input) {
                let value = parseFloat(input.value) || 0; // Convert input value to a float, or 0 if NaN
                total += value; // Add each value to the total
            });
            document.getElementById('IncomeWithoutOtherincome').value = total.toFixed(2); // Update the total in the readonly input
        }

        // Function to attach event listeners
        function attachIncomeListeners() {
            document.querySelectorAll('.income-input').forEach(function (input) {
                input.addEventListener('input', calculateIncomeWithoutOtherincome); // Recalculate income on input change
            });

            // Calculate totals on page load to handle pre-filled values
            window.onload = function () {
                calculateIncomeWithoutOtherincome();
            };
        }

        attachIncomeListeners(); // Attach the event listeners on page load
    </script>




    <script>
        // Calculate the total expenses including all fields
        function calculateTotalExpenses() {
            // Get values of each individual total
            let totalHandling = parseFloat(document.getElementById('TotalHandlingSystemcost').value) || 0;
            let totalRebate = parseFloat(document.getElementById('TotalRebateSystemcost').value) || 0;
            let totalTrucking = parseFloat(document.getElementById('TruckingCost').value) || 0;
            let totalExportColombo = parseFloat(document.getElementById('TotalExportCostColombo').value) || 0;
            let totalOtherExpenses = calculateOtherExpensesTotal();

            // Sum all totals
            let grandTotal = totalHandling + totalRebate + totalTrucking + totalExportColombo + totalOtherExpenses;

            // Update the Total Expenses field
            document.getElementById('TotalExpenses').value = grandTotal.toFixed(2);
        }

        // Function to calculate the total for "Other Expenses"
        function calculateOtherExpensesTotal() {
            let total = 0;
            document.querySelectorAll('#otherExpensesTable tbody tr input[name="ExpenseAmount"]').forEach(function (input) {
                let value = parseFloat(input.value) || 0;
                total += value;
            });
            return total;
        }

        // Attach event listeners to update totals
        function attachEventListeners() {
            document.querySelectorAll('.Handling-cost-input, .Rebate-cost-input, .Trucking-cost-input, .Exp-cost-colombo-input').forEach(function (input) {
                input.addEventListener('input', function () {
                    calculateIndividualTotals(); // Recalculate individual totals
                    calculateTotalExpenses(); // Update overall total
                });
            });

            // Trigger calculation on input change in "Other Expenses"
            document.querySelectorAll('#otherExpensesTable tbody').forEach(function (tbody) {
                tbody.addEventListener('input', calculateTotalExpenses);
            });

            // Calculate totals on page load to handle any pre-filled values
            window.onload = function () {
                calculateIndividualTotals();
                calculateTotalExpenses();
                
            };
        }

        // Recalculate each individual total
        function calculateIndividualTotals() {
            calculateTotalHandlingSystemCost();
            calculateTotalRebateSystemCost();
            calculateTruckingCost();
            calculateTotalExportCostColombo();
        }

        attachEventListeners(); // Attach all event listeners on page load
    </script>

    <!-- Individual Calculation Scripts -->



    <script>
        function calculateTruckingCost() {
            let total = 0;
            document.querySelectorAll('.Trucking-cost-input').forEach(function (input) {
                let value = parseFloat(input.value) || 0;
                total += value;
            });
            document.getElementById('TruckingCost').value = total.toFixed(2);
        }
    </script>

    <script>
        function calculateTotalRebateSystemCost() {
            let total = 0;
            document.querySelectorAll('.Rebate-cost-input').forEach(function (input) {
                let value = parseFloat(input.value) || 0;
                total += value;
            });
            document.getElementById('TotalRebateSystemcost').value = total.toFixed(2);
        }
    </script>

    <script>
        function calculateTotalHandlingSystemCost() {
            let total = 0;
            document.querySelectorAll('.Handling-cost-input').forEach(function (input) {
                let value = parseFloat(input.value) || 0;
                total += value;
            });
            document.getElementById('TotalHandlingSystemcost').value = total.toFixed(2);
        }
    </script>

    <script>
        function calculateTotalExportCostColombo() {
            let total = 0;
            document.querySelectorAll('.Exp-cost-colombo-input').forEach(function (input) {
                let value = parseFloat(input.value) || 0;
                total += value;
            });
            document.getElementById('TotalExportCostColombo').value = total.toFixed(2);
        }
    </script>

    <!-- Scripts for dynamically adding/removing rows and calculating totals -->
    <script>
        $(document).ready(function () {
            $('#addExpenseRow').click(function () {
                var newRow = `<tr>
                            <td><input type="text" class="form-control" name="ExpenseDescription" /></td>
                            <td><input type="number" class="form-control" name="ExpenseAmount" /></td>
                            <td><button type="button" class="btn btn-danger removeRow">Remove</button></td>
                        </tr>`;
                $('#otherExpensesTable tbody').append(newRow);
                calculateTotalExpenses(); // Recalculate total when new row is added
            });

            $('#addIncomeRow').click(function () {
                var newRow = `<tr>
                            <td><input type="text" class="form-control" name="IncomeDescription" /></td>
                            <td><input type="number" class="form-control" name="IncomeAmount" /></td>
                            <td><button type="button" class="btn btn-danger removeRow">Remove</button></td>
                        </tr>`;
                $('#otherIncomesTable tbody').append(newRow);
            });

            $(document).on('click', '.removeRow', function () {
                $(this).closest('tr').remove();
                calculateTotalExpenses(); // Recalculate total when a row is removed
            });

            $('form').submit(function () {
                var expenses = [];
                $('#otherExpensesTable tbody tr').each(function () {
                    var description = $(this).find('input[name="ExpenseDescription"]').val();
                    var amount = $(this).find('input[name="ExpenseAmount"]').val();
                    if (description && amount) {
                        expenses.push({ Description: description, Amount: amount });
                    }
                });

                var incomes = [];
                $('#otherIncomesTable tbody tr').each(function () {
                    var description = $(this).find('input[name="IncomeDescription"]').val();
                    var amount = $(this).find('input[name="IncomeAmount"]').val();
                    if (description && amount) {
                        incomes.push({ Description: description, Amount: amount });
                    }
                });

                $('#ExpensesJson').val(JSON.stringify(expenses));
                $('#IncomesJson').val(JSON.stringify(incomes));
            });
        });
    </script>
} *@











@* @section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        function calculateTotalExpenses() {
            // Get values of each individual total
            let totalHandling = parseFloat(document.getElementById('TotalHandlingSystemcost').value) || 0;
            let totalRebate = parseFloat(document.getElementById('TotalRebateSystemcost').value) || 0;
            let totalTrucking = parseFloat(document.getElementById('TruckingCost').value) || 0;
            let totalExportColombo = parseFloat(document.getElementById('TotalExportCostColombo').value) || 0;

            // Sum all totals
            let grandTotal = totalHandling + totalRebate + totalTrucking + totalExportColombo;

            // Update the Total Expenses field
            document.getElementById('TotalExpenses').value = grandTotal.toFixed(2);
        }

        // Update the Total Expenses whenever any individual total changes
        function attachEventListeners() {
            document.querySelectorAll('.Handling-cost-input, .Rebate-cost-input, .Trucking-cost-input, .Exp-cost-colombo-input').forEach(function (input) {
                input.addEventListener('input', function () {
                    calculateTotalHandlingSystemCost();
                    calculateTotalRebateSystemCost();
                    calculateTruckingCost();
                    calculateTotalExportCostColombo();
                    calculateTotalExpenses();
                });
            });

            // Also calculate total on page load to handle pre-filled values
            window.onload = function () {
                calculateTotalHandlingSystemCost();
                calculateTotalRebateSystemCost();
                calculateTruckingCost();
                calculateTotalExportCostColombo();
                calculateTotalExpenses();
            };
        }

        attachEventListeners();
    </script>


    <script>
        function calculateTruckingCost() {
            let total = 0;
            document.querySelectorAll('.Trucking-cost-input').forEach(function (input) {
                let value = parseFloat(input.value) || 0;
                total += value;
            });
            document.getElementById('TruckingCost').value = total.toFixed(2);
        }

        document.querySelectorAll('.Trucking-cost-input').forEach(function (input) {
            input.addEventListener('input', calculateTruckingCost);
        });

        // Call calculateTotalRebateSystemCost on page load to handle any pre-filled values
        window.onload = calculateTruckingCost;
    </script>

    <script>
        function calculateTotalRebateSystemCost() {
            let total = 0;
            document.querySelectorAll('.Rebate-cost-input').forEach(function (input) {
                let value = parseFloat(input.value) || 0;
                total += value;
            });
            document.getElementById('TotalRebateSystemcost').value = total.toFixed(2);
        }

        document.querySelectorAll('.Rebate-cost-input').forEach(function (input) {
            input.addEventListener('input', calculateTotalRebateSystemCost);
        });

        // Call calculateTotalRebateSystemCost on page load to handle any pre-filled values
        window.onload = calculateTotalRebateSystemCost;
    </script>

    <script>
        function calculateTotalHandlingSystemCost() {
            let total = 0;
            document.querySelectorAll('.Handling-cost-input').forEach(function (input) {
                let value = parseFloat(input.value) || 0;
                total += value;
            });
            document.getElementById('TotalHandlingSystemcost').value = total.toFixed(2);
        }

        document.querySelectorAll('.Handling-cost-input').forEach(function (input) {
            input.addEventListener('input', calculateTotalHandlingSystemCost);
        });

        // Call calculateTotalHandlingSystemCost on page load to handle any pre-filled values
        window.onload = calculateTotalHandlingSystemCost;
    </script>

    <script>
        function calculateTotalExportCostColombo() {
            let total = 0;
            document.querySelectorAll('.Exp-cost-colombo-input').forEach(function (input) {
                let value = parseFloat(input.value) || 0;
                total += value;
            });
            document.getElementById('TotalExportCostColombo').value = total.toFixed(2);
        }

        document.querySelectorAll('.Exp-cost-colombo-input').forEach(function (input) {
            input.addEventListener('input', calculateTotalExportCostColombo);
        });

        // Call calculateTotalExportCostColombo on page load to handle any pre-filled values
        window.onload = calculateTotalExportCostColombo;
    </script>

    <script>
        $(document).ready(function () {
            $('#addExpenseRow').click(function () {
                var newRow = `<tr>
                    <td><input type="text" class="form-control" name="ExpenseDescription" /></td>
                    <td><input type="number" class="form-control" name="ExpenseAmount" /></td>
                    <td><button type="button" class="btn btn-danger removeRow">Remove</button></td>
                </tr>`;
                $('#otherExpensesTable tbody').append(newRow);
            });

            $('#addIncomeRow').click(function () {
                var newRow = `<tr>
                    <td><input type="text" class="form-control" name="IncomeDescription" /></td>
                    <td><input type="number" class="form-control" name="IncomeAmount" /></td>
                    <td><button type="button" class="btn btn-danger removeRow">Remove</button></td>
                </tr>`;
                $('#otherIncomesTable tbody').append(newRow);
            });

            $(document).on('click', '.removeRow', function () {
                $(this).closest('tr').remove();
            });

            $('form').submit(function () {
                var expenses = [];
                $('#otherExpensesTable tbody tr').each(function () {
                    var description = $(this).find('input[name="ExpenseDescription"]').val();
                    var amount = $(this).find('input[name="ExpenseAmount"]').val();
                    if (description && amount) {
                        expenses.push({ Description: description, Amount: amount });
                    }
                });

                var incomes = [];
                $('#otherIncomesTable tbody tr').each(function () {
                    var description = $(this).find('input[name="IncomeDescription"]').val();
                    var amount = $(this).find('input[name="IncomeAmount"]').val();
                    if (description && amount) {
                        incomes.push({ Description: description, Amount: amount });
                    }
                });

                $('#ExpensesJson').val(JSON.stringify(expenses));
                $('#IncomesJson').val(JSON.stringify(incomes));
            });
        });


    </script>
} *@